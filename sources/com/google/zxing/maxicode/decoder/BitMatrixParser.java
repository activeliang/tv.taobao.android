package com.google.zxing.maxicode.decoder;

import android.support.v4.view.InputDeviceCompat;
import android.taobao.windvane.extra.uc.UCNetworkDelegate;
import anet.channel.util.HttpConstant;
import com.alibaba.wireless.security.SecExceptionCode;
import com.google.zxing.common.BitMatrix;
import com.powyin.slide.BuildConfig;
import com.taobao.atlas.dexmerge.dx.io.Opcodes;
import com.yunos.tvtaobao.biz.request.elem.ElemResultCode;
import mtopsdk.common.util.HttpHeaderConstant;
import tv.danmaku.ijk.media.player.IMediaPlayer;

final class BitMatrixParser {
    private static final int[][] BITNR = {new int[]{SecExceptionCode.SEC_ERROR_INIT_DATA_FILE_MISMATCH, Opcodes.INVOKE_INTERFACE_RANGE, 127, 126, Opcodes.LONG_TO_FLOAT, Opcodes.LONG_TO_INT, Opcodes.DOUBLE_TO_LONG, Opcodes.DOUBLE_TO_INT, Opcodes.SUB_INT, Opcodes.ADD_INT, 151, 150, Opcodes.MUL_LONG, Opcodes.SUB_LONG, 163, 162, 169, Opcodes.MUL_FLOAT, Opcodes.REM_DOUBLE, Opcodes.DIV_DOUBLE, 181, 180, 187, Opcodes.USHR_INT_2ADDR, 193, 192, 199, 198, -2, -2}, new int[]{123, SecExceptionCode.SEC_ERROR_INIT_NO_DATA_FILE, Opcodes.INT_TO_LONG, 128, Opcodes.FLOAT_TO_INT, Opcodes.LONG_TO_DOUBLE, Opcodes.INT_TO_BYTE, Opcodes.DOUBLE_TO_FLOAT, Opcodes.DIV_INT, Opcodes.MUL_INT, 153, Opcodes.SHL_INT, 159, 158, 165, Opcodes.SHR_LONG, Opcodes.ADD_DOUBLE, Opcodes.REM_FLOAT, 177, 176, 183, 182, Opcodes.MUL_LONG_2ADDR, Opcodes.SUB_LONG_2ADDR, Opcodes.SHL_LONG_2ADDR, Opcodes.XOR_LONG_2ADDR, 201, 200, 816, -3}, new int[]{125, 124, Opcodes.INT_TO_DOUBLE, 130, Opcodes.FLOAT_TO_DOUBLE, Opcodes.FLOAT_TO_LONG, Opcodes.INT_TO_SHORT, Opcodes.INT_TO_CHAR, 149, 148, Opcodes.ADD_LONG, 154, 161, 160, 167, 166, Opcodes.MUL_DOUBLE, Opcodes.SUB_DOUBLE, Opcodes.DIV_INT_2ADDR, 178, 185, 184, Opcodes.REM_LONG_2ADDR, Opcodes.DIV_LONG_2ADDR, Opcodes.USHR_LONG_2ADDR, Opcodes.SHR_LONG_2ADDR, 203, 202, 818, 817}, new int[]{283, 282, 277, UCNetworkDelegate.CHANGE_WEBVIEW_URL, 271, 270, 265, 264, 259, 258, 253, 252, 247, 246, 241, 240, 235, 234, 229, 228, Opcodes.XOR_INT_LIT8, 222, Opcodes.RSUB_INT_LIT8, Opcodes.ADD_INT_LIT8, Opcodes.DIV_INT_LIT16, Opcodes.MUL_INT_LIT16, 205, 204, 819, -3}, new int[]{285, 284, 279, 278, 273, 272, 267, 266, 261, 260, 255, 254, 249, 248, 243, 242, 237, 236, 231, 230, Opcodes.SHR_INT_LIT8, Opcodes.SHL_INT_LIT8, Opcodes.DIV_INT_LIT8, Opcodes.MUL_INT_LIT8, Opcodes.AND_INT_LIT16, 212, 207, 206, 821, IMediaPlayer.MEDIA_INFO_ARTP_END_TO_END_DELAY}, new int[]{287, 286, 281, 280, 275, 274, 269, 268, 263, 262, InputDeviceCompat.SOURCE_KEYBOARD, 256, 251, 250, 245, 244, 239, 238, 233, 232, 227, Opcodes.USHR_INT_LIT8, Opcodes.AND_INT_LIT8, Opcodes.REM_INT_LIT8, Opcodes.XOR_INT_LIT16, Opcodes.OR_INT_LIT16, 209, 208, 822, -3}, new int[]{289, 288, 295, 294, 301, 300, 307, SecExceptionCode.SEC_ERROR_STA_KEY_NOT_EXISTED, 313, SecExceptionCode.SEC_ERROR_STA_LOW_VERSION_DATA_FILE, 319, 318, 325, 324, 331, 330, 337, 336, 343, 342, 349, 348, 355, 354, 361, 360, 367, 366, 824, 823}, new int[]{291, 290, 297, 296, SecExceptionCode.SEC_ERROR_STA_NO_DATA_FILE, 302, SecExceptionCode.SEC_ERROR_STA_NO_SUCH_INDEX, 308, BuildConfig.VERSION_CODE, 314, 321, 320, 327, 326, ElemResultCode.RETURN_REQUEST_CODE, 332, 339, 338, 345, 344, 351, 350, 357, 356, 363, 362, 369, 368, 825, -3}, new int[]{293, 292, SecExceptionCode.SEC_ERROR_STA_STORE_UNKNOWN_ERROR, 298, SecExceptionCode.SEC_ERROR_STA_INCORRECT_DATA_FILE_DATA, 304, SecExceptionCode.SEC_ERROR_STA_DECRYPT_MISMATCH_KEY_DATA, SecExceptionCode.SEC_ERROR_STA_INVALID_ENCRYPTED_DATA, 317, 316, 323, 322, 329, com.powyin.scroll.BuildConfig.VERSION_CODE, 335, 334, 341, 340, 347, 346, 353, 352, 359, 358, 365, 364, 371, 370, 827, 826}, new int[]{409, 408, 403, 402, 397, 396, 391, 390, 79, 78, -2, -2, 13, 12, 37, 36, 2, -1, 44, 43, 109, 108, 385, 384, 379, 378, 373, 372, 828, -3}, new int[]{411, 410, 405, 404, SecExceptionCode.SEC_ERROR_STA_UNKNOWN_ERROR, 398, 393, 392, 81, 80, 40, -2, 15, 14, 39, 38, 3, -1, -1, 45, 111, 110, 387, 386, 381, 380, 375, 374, 830, 829}, new int[]{413, 412, 407, 406, 401, 400, 395, 394, 83, 82, 41, -3, -3, -3, -3, -3, 5, 4, 47, 46, 113, 112, 389, 388, 383, 382, 377, 376, 831, -3}, new int[]{415, 414, 421, HttpHeaderConstant.SC_FLOW_LIMITED, 427, 426, 103, 102, 55, 54, 16, -3, -3, -3, -3, -3, -3, -3, 20, 19, 85, 84, 433, 432, 439, 438, 445, 444, 833, 832}, new int[]{417, HttpConstant.SC_REQUESTED_RANGE_NOT_SATISFIABLE, 423, 422, 429, 428, 105, 104, 57, 56, -3, -3, -3, -3, -3, -3, -3, -3, 22, 21, 87, 86, 435, 434, 441, 440, 447, 446, 834, -3}, new int[]{HttpHeaderConstant.SC_INSUFFICIENT_SPACE_ON_RESOURCE, 418, 425, 424, 431, 430, 107, 106, 59, 58, -3, -3, -3, -3, -3, -3, -3, -3, -3, 23, 89, 88, 437, 436, 443, 442, 449, 448, 836, 835}, new int[]{481, 480, 475, 474, 469, 468, 48, -2, 30, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 0, 53, 52, 463, 462, 457, 456, 451, 450, 837, -3}, new int[]{483, 482, 477, 476, 471, 470, 49, -1, -2, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, -2, -1, 465, 464, 459, 458, 453, 452, 839, 838}, new int[]{485, 484, 479, 478, 473, 472, 51, 50, 31, -3, -3, -3, -3, -3, -3, -3, -3, -3, -3, 1, -2, 42, 467, 466, 461, 460, 455, 454, 840, -3}, new int[]{487, 486, 493, 492, SecExceptionCode.SEC_ERROR_DYN_ENC_UNKNOWN_ERROR, 498, 97, 96, 61, 60, -3, -3, -3, -3, -3, -3, -3, -3, -3, 26, 91, 90, SecExceptionCode.SEC_ERROR_DYN_STORE_GET_ENCRYPT_KEY_FAILED, SecExceptionCode.SEC_ERROR_DYN_STORE_GET_DATA_FILE_KEY_FAILED, 511, 510, 517, 516, 842, 841}, new int[]{489, 488, 495, 494, SecExceptionCode.SEC_ERROR_DYN_STORE_INVALID_PARAM, 500, 99, 98, 63, 62, -3, -3, -3, -3, -3, -3, -3, -3, 28, 27, 93, 92, 507, 506, InputDeviceCompat.SOURCE_DPAD, 512, 519, 518, 843, -3}, new int[]{491, 490, 497, 496, SecExceptionCode.SEC_ERROR_DYN_STORE_GET_SYS_PROPERTIES_FAILED, SecExceptionCode.SEC_ERROR_DYN_STORE_NO_MEMORY, 101, 100, 65, 64, 17, -3, -3, -3, -3, -3, -3, -3, 18, 29, 95, 94, 509, SecExceptionCode.SEC_ERROR_DYN_STORE_DDPEX_KEY_VALUE_NOT_EXSIT, 515, 514, 521, 520, 845, 844}, new int[]{559, 558, 553, 552, 547, 546, 541, 540, 73, 72, 32, -3, -3, -3, -3, -3, -3, 10, 67, 66, SecExceptionCode.SEC_ERROR_INIT_SOURCE_DIR_NOT_EXISTED, 114, 535, 534, 529, 528, 523, 522, 846, -3}, new int[]{561, 560, 555, 554, 549, 548, 543, 542, 75, 74, -2, -1, 7, 6, 35, 34, 11, -2, 69, 68, 117, 116, 537, 536, 531, 530, 525, 524, 848, 847}, new int[]{563, 562, 557, 556, 551, 550, 545, 544, 77, 76, -2, 33, 9, 8, 25, 24, -1, -2, 71, 70, 119, 118, 539, 538, 533, 532, 527, 526, 849, -3}, new int[]{565, 564, 571, 570, 577, 576, 583, 582, 589, 588, 595, 594, SecExceptionCode.SEC_ERROR_SIGNATRUE_INVALID_INPUT, 600, SecExceptionCode.SEC_ERROR_SIGNATURE_DATA_FILE_MISMATCH, SecExceptionCode.SEC_ERROR_SIGNATURE_NO_SEEDSECRET, SecExceptionCode.SEC_ERROR_SIGNATURE_ATLAS_KEY_NOT_EXSITED, SecExceptionCode.SEC_ERROR_SIGNATURE_ILLEGEL_KEY, 619, 618, 625, 624, 631, 630, 637, 636, 643, 642, 851, 850}, new int[]{567, 566, 573, 572, 579, 578, 585, 584, 591, 590, 597, 596, SecExceptionCode.SEC_ERROR_SIGNATURE_HASHHEX_FAILED, SecExceptionCode.SEC_ERROR_SIGNATURE_NO_MEM, SecExceptionCode.SEC_ERROR_SIGNATURE_INCORRECT_DATA_FILE, SecExceptionCode.SEC_ERROR_SIGNATURE_NO_DATA_FILE, SecExceptionCode.SEC_ERROR_SIGNATURE_LOW_VERSION_DATA_FILE, SecExceptionCode.SEC_ERROR_SIGNATURE_BLOWFISH_FAILED, 621, 620, 627, 626, 633, 632, 639, 638, 645, 644, 852, -3}, new int[]{569, 568, 575, 574, 581, 580, 587, 586, 593, 592, SecExceptionCode.SEC_ERROR_DYN_STORE_UNKNOWN_ERROR, 598, SecExceptionCode.SEC_ERROR_SIGNATURE_CONFUSE_FAILED, SecExceptionCode.SEC_ERROR_SIGNATURE_BASE64_FAILED, 611, SecExceptionCode.SEC_ERROR_SIGNATURE_INCORRECT_DATA_FILE_DATA, 617, 616, 623, 622, 629, 628, 635, 634, 641, 640, 647, 646, 854, 853}, new int[]{727, 726, 721, IMediaPlayer.MEDIA_INFO_HTTPDNS_CONNECT_FAIL, IMediaPlayer.MEDIA_INFO_SEI_USERDEFINED_STRUCT, IMediaPlayer.MEDIA_INFO_NETWORK_TRAFFIC, IMediaPlayer.MEDIA_INFO_STREAM_ABNORMAL_VIDEO_DTS, IMediaPlayer.MEDIA_INFO_STREAM_ABNORMAL_AVSTREAM, 703, 702, 697, 696, 691, 690, 685, 684, 679, 678, 673, 672, 667, 666, 661, 660, 655, 654, 649, 648, 855, -3}, new int[]{729, 728, 723, 722, IMediaPlayer.MEDIA_INFO_SWITCH_PATH_SYNC_FRAME, IMediaPlayer.MEDIA_INFO_FACE_DETECT_INFO, IMediaPlayer.MEDIA_INFO_AVFORMAT_TIME, IMediaPlayer.MEDIA_INFO_NETWORK_SHAKE, 705, 704, SecExceptionCode.SEC_ERROR_SIGNATRUE_UNKNOWN, SecExceptionCode.SEC_ERROR_SIGNATURE_NONSUPPORTED_SIGN_TYPE, 693, 692, 687, 686, 681, 680, 675, 674, 669, 668, 663, 662, 657, 656, 651, 650, 857, 856}, new int[]{731, 730, 725, 724, IMediaPlayer.MEDIA_INFO_SWITCH_PATH_SYNC_FRAME_SUCCESS, IMediaPlayer.MEDIA_INFO_SWITCH_PATH_SYNC_FRAME_FAIL, IMediaPlayer.MEDIA_INFO_FRAME_QUEUE_NULL, IMediaPlayer.MEDIA_INFO_VIDEO_DECODE_ERROR, IMediaPlayer.MEDIA_INFO_STREAM_ABNORMAL_AUDIO, IMediaPlayer.MEDIA_INFO_STREAM_ABNORMAL_VIDEO, 701, 700, 695, 694, 689, 688, 683, 682, 677, 676, 671, 670, 665, 664, 659, 658, 653, 652, 858, -3}, new int[]{733, 732, 739, 738, 745, 744, 751, 750, 757, 756, 763, 762, 769, Opcodes.FILL_ARRAY_DATA_PAYLOAD, 775, 774, 781, 780, 787, 786, 793, 792, SecExceptionCode.SEC_ERROR_STA_KEY_ENC_UNKNOWN_ERROR, 798, SecExceptionCode.SEC_ERROR_PKG_VALID_INVALID_APK_PATH, SecExceptionCode.SEC_ERROR_PKG_VALID_NO_CONFIG_FILE, 811, 810, 860, 859}, new int[]{735, 734, 741, 740, 747, 746, 753, 752, 759, 758, 765, 764, 771, 770, 777, 776, 783, 782, 789, 788, 795, 794, 801, 800, 807, SecExceptionCode.SEC_ERROR_PKG_VALID_OPEN_APK_FAILED, 813, 812, 861, -3}, new int[]{737, 736, 743, 742, 749, 748, 755, 754, 761, 760, 767, 766, 773, 772, 779, 778, 785, 784, 791, 790, 797, 796, SecExceptionCode.SEC_ERROR_PKG_VALID_NO_MEMORY, 802, 809, 808, 815, 814, 863, 862}};
    private final BitMatrix bitMatrix;

    BitMatrixParser(BitMatrix bitMatrix2) {
        this.bitMatrix = bitMatrix2;
    }

    /* access modifiers changed from: package-private */
    public byte[] readCodewords() {
        byte[] result = new byte[Opcodes.ADD_INT];
        int height = this.bitMatrix.getHeight();
        int width = this.bitMatrix.getWidth();
        for (int y = 0; y < height; y++) {
            int[] bitnrRow = BITNR[y];
            for (int x = 0; x < width; x++) {
                int bit = bitnrRow[x];
                if (bit >= 0 && this.bitMatrix.get(x, y)) {
                    int i = bit / 6;
                    result[i] = (byte) (result[i] | ((byte) (1 << (5 - (bit % 6)))));
                }
            }
        }
        return result;
    }
}
